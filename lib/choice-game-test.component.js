"use strict";var __decorate=this&&this.__decorate||function(e,t,o,n){var r,a=arguments.length,s=a<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,o):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,o,n);else for(var l=e.length-1;l>=0;l--)(r=e[l])&&(s=(a<3?r(s):a>3?r(t,o,s):r(t,o))||s);return a>3&&s&&Object.defineProperty(t,o,s),s},__metadata=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)},core_1=require("@angular/core"),models_1=require("./models"),toolbar_component_1=require("./commons/toolbar/toolbar.component"),game_control_1=require("./services/game-control"),ChoiceGameTest=function(){function e(e){var t=this;this.gameControl=e,this.answers=["hola","loquito"],this.expression="3 + 5 \\cup ",this.gameProblem=new models_1.GameProblem("2 + 4",["2","6","10"],["6"]),this.gameLevel=new models_1.GameLevel([this.gameProblem],new models_1.ScoreConfig(10,10,!0,[new models_1.ExtraScore])),this.toolbarConfig=new toolbar_component_1.ToolbarConfig,this.logs="",this.gameControl.onGameInstanceChange().subscribe(function(e){return t.logs="Game Instance Change!"}),this.gameControl.onStart().subscribe(function(){return t.logs="started!"}),this.gameControl.onScoreChange().subscribe(function(e){return t.logs="score to add : "+e.allScore()})}return e.prototype.setGame=function(){this.gameControl.setGameInstance(this.gameControl.gameMock)},e.prototype.start=function(){this.gameControl.start()},e=__decorate([core_1.Component({selector:"tbt-choices-game",template:'\n        <!--<game-toolbar></game-toolbar>-->\n        <game-view>\n            <first-level-body>\n                <h2 style="color: ghostwhite">Enjoy the game!</h2>\n            </first-level-body>\n            <level-load-body>\n                <h3>This is the body</h3>\n                <p>Here we can inject the html to show when game-view shows de level-load</p>\n                <effectivity-content></effectivity-content>                \n            </level-load-body>\n            \n            <game-over-body>\n                <effectivity-content [isGameOver]="true"></effectivity-content>\n            </game-over-body>\n        </game-view>\n        \n        <button (click)="setGame()">Set Game</button>\n        <button (click)="start()">Start</button>\n        \n        <p>{{logs}}</p>\n        <!--<level-play-->\n            <!--[gameProblem]="gameProblem"-->\n            <!--[gameLevel]="gameLevel"-->\n            <!--[toolbarConfig]="toolbarConfig"-->\n        <!--&gt;</level-play>-->\n        <!--<level-load></level-load>-->\n        <!--<h1>{{post.title}}</h1>-->\n        <!--<h6>{{post.author}} {{post.date}}</h6>-->\n        <!--<h5>{{post.content}}</h5>-->\n        <!--<answer-buttons [answers]="answers">-->\n        <!--</answer-buttons>-->\n        <!--<math-problem-expression [problemExpression]="expression"></math-problem-expression>-->\n    '}),__metadata("design:paramtypes",[game_control_1.GameControl])],e)}();exports.ChoiceGameTest=ChoiceGameTest;var MdProgressCircleFake=function(){function e(){}return __decorate([core_1.Input(),__metadata("design:type",String)],e.prototype,"value",void 0),e=__decorate([core_1.Directive({selector:"md-progress-circle"}),__metadata("design:paramtypes",[])],e)}();exports.MdProgressCircleFake=MdProgressCircleFake;